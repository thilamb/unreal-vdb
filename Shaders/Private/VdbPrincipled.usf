// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ReflectionEnvironmentShared.ush"

#include "/Plugin/VdbVolume/Private/VdbCommon.ush"

Texture2D<float>	SceneDepthTexture;
Texture2D<float4>	PrevAccumTex;
uint				NumAccumulations;
uint				DisplayBounds;

// Using Uniform Buffer VdbPrincipledParams

#define SAMPLING_FLOAT ReadValue
#define SAMPLING_VECTOR ReadValueVec3f
#if PATH_TRACING || USE_TRILINEAR_SAMPLING
	#define SAMPLING_FLOAT_FILTERING TrilinearSampling
	#define SAMPLING_VECTOR_FILTERING TrilinearSamplingVec3f
#else
	#define SAMPLING_FLOAT_FILTERING SAMPLING_FLOAT
	#define SAMPLING_VECTOR_FILTERING SAMPLING_VECTOR
#endif

#if defined(SHADER_VERTEX)

void MainVS(in float4 InPosition : ATTRIBUTE0, out float4 OutPosition : SV_Position)
{
	float4 VolPos = InPosition * float4(VdbPrincipledParams.VolumeScale, 1.0) + float4(VdbPrincipledParams.VolumeTranslation, 0.0);
	float4 LocalPos = mul(VolPos, VdbPrincipledParams.VolumeToLocal);
	float4 WorldPos = mul(LocalPos, VdbPrincipledParams.LocalToWorld);
	OutPosition = mul(WorldPos, LWCHackToFloat(PrimaryView.WorldToClip));
}

#elif defined(SHADER_PIXEL)

float3 GetShadowTransmittance(
	VdbSampler DensitySampler,
	pnanovdb_vec3_t bbox_min,
	pnanovdb_vec3_t bbox_max,
	pnanovdb_vec3_t pos, // index space
	pnanovdb_vec3_t dir, // index space
	HeterogenousMedium Medium,
	float StepMultiplier,
	float3 SigmaT,
	in out RandomSequence RandSequence)
{
	VdbRay ShadowRay;
	ShadowRay.Origin = pos;
	ShadowRay.Direction = dir;
	ShadowRay.TMin = 0.0001f; // DeltaFloat;
	ShadowRay.TMax = POSITIVE_INFINITY;

	if (!CheckBounds(ShadowRay, bbox_min, bbox_max))
		return 1.0f;

	float RaymarchDistance = ShadowRay.TMax - ShadowRay.TMin; // Index space
	float StepSize = VdbPrincipledParams.StepSize * StepMultiplier / VdbPrincipledParams.VoxelSize; // Index space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), VdbPrincipledParams.MaxRayDepth);
	float StepWorldMeters = VdbPrincipledParams.StepSize * StepMultiplier * CENTIMETER_TO_METER;

	float AccumDensity = 0.0;
	for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		float s = ShadowRay.TMin + (iStep + RandomSequence_GenerateSample1D(RandSequence)) * StepSize;
		pnanovdb_vec3_t iPos = pnanovdb_hdda_ray_start(ShadowRay.Origin, s, ShadowRay.Direction);

		float Density = SAMPLING_FLOAT(iPos, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor);
#if LEVEL_SET
		Density = Density < 0.0 ? 1.0 : 0.0;
#endif
		AccumDensity += Density * Medium.densityScale;
	}
	return exp(-AccumDensity * StepWorldMeters * SigmaT);
}

// Ray Marching version
float4 RaymarchVolume(
	VdbSampler DensitySampler,
#if USE_TEMPERATURE_VDB
	VdbSampler TemperatureSampler,
#endif
#if USE_COLOR_VDB
	VdbSampler ColorSampler,
#endif
	pnanovdb_vec3_t bbox_min,
	pnanovdb_vec3_t bbox_max,
	VdbRay Ray,
	HeterogenousMedium Medium,
	in out RandomSequence RandSequence)
{
	if (!CheckBounds(Ray, bbox_min, bbox_max))
	{
		return float4(0.0, 0.0, 0.0, 0.0);
	}
	else if (DisplayBounds != 0) // Debug Display
	{
		return float4(1.0, 0.0, 1.0, 1.0);
	}

	// Transform light world direction to index space
	float3 LightDir = WorldToIndexDirection(View.DirectionalLightDirection, VdbPrincipledParams.WorldToLocal, DensitySampler.GridBuffer, DensitySampler.Grid); // Index space
	float3 LightCol = View.DirectionalLightColor.xyz;
	float CosThetaPhase = dot(LightDir, Ray.Direction);

	float3 Radiance = 0.0;
	float3 Transmittance = 1.0;

#if LEVEL_SET
	// ------------------------------------------------------------------------
	// Test first intersection

	ZeroCrossingHit HitResults;
	if (!GetNextIntersection(DensitySampler, Ray, HitResults))
	{
		return float4(0.0, 0.0, 0.0, 0.0);
	}

	bool bInside = HitResults.v0 > 0.0;
	// If we're inside the volume, start raymarching at camera position, otherwise skip empty space
	float StartDistance = bInside ? Ray.TMin : HitResults.t_hit;
#else
	float StartDistance = Ray.TMin;
#endif

	// ------------------------------------------------------------------------
	// Raymarch with fixed steps

	float StepSize = VdbPrincipledParams.StepSize / VdbPrincipledParams.VoxelSize; // Index space
	float RaymarchDistance = Ray.TMax - StartDistance; // Index space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), VdbPrincipledParams.MaxRayDepth);
	float StepWorldMeters = VdbPrincipledParams.StepSize * CENTIMETER_TO_METER;

	LOOP for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		float s = StartDistance + (iStep + RandomSequence_GenerateSample1D(RandSequence)) * StepSize;
		if (s >= Ray.TMax)
			break;

		pnanovdb_vec3_t iPos = pnanovdb_hdda_ray_start(Ray.Origin, s, Ray.Direction);

#if LEVEL_SET
		float Density = SAMPLING_FLOAT(iPos, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor) < 0.0 ? 1.0 : 0.0;
#else
		float Density = SAMPLING_FLOAT_FILTERING(iPos, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor);
#endif
		Density *= Medium.densityScale;

		if (Density == 0.0) continue;

		float3 SigmaT = VdbPrincipledParams.Color.rgb; // Extinction
		float3 Extinction = SigmaT * Density;
		float3 Scattering = Extinction * Medium.albedo;

#ifdef ANALYTIC_INTEGRATION
		Extinction = max(Extinction, 0.00000001);
		float3 TransmittanceIntegral = (1.0 - exp(-StepWorldMeters * Extinction)) / Extinction;
		float3 StepTransmittance = Transmittance * TransmittanceIntegral;
#else
		float3 StepTransmittance = Transmittance * StepWorldMeters;
#endif
		if (VdbPrincipledParams.ColoredTransmittance == 0)
		{
			// Using average instead of float3 value, to avoid weird color shifts and be more user-friendly
			StepTransmittance = Average(StepTransmittance);
		}

		float3 StepRadiance = 0.0;

        // I'm choosing to use Color grid as a Color tint only and not participate in scattering
#if USE_COLOR_VDB
		float3 Color = SAMPLING_VECTOR_FILTERING(iPos, ColorSampler.GridBuffer, ColorSampler.GridType, ColorSampler.Accessor);
#else
		float3 Color = 1.0;
#endif

		// Single scattering from Directional light or Environment
		if (VdbPrincipledParams.UseDirectionalLight)
		{
			float3 ShadowDirection = LightDir;
			float3 ShadowTransmittance = GetShadowTransmittance(DensitySampler, bbox_min, bbox_max, iPos, ShadowDirection, Medium, 2.0, SigmaT, RandSequence);
			if (VdbPrincipledParams.ColoredTransmittance == 0)
			{
				ShadowTransmittance = Average(ShadowTransmittance);
			}
			StepRadiance += StepTransmittance * Scattering * LightCol * ShadowTransmittance * PhaseHG(CosThetaPhase, Medium.anisotropy) * Color;
		}
		if (VdbPrincipledParams.UseEnvironmentLight)
		{
			// Random sample in entire sphere direction to capture Ambient environment
			float2 rnd = RandomSequence_GenerateSample2D(RandSequence);
			float3 ShadowDirection = SampleHenyeyGreenstein(0.0, rnd.x, rnd.y);
			float3 ShadowTransmittance = GetShadowTransmittance(DensitySampler, bbox_min, bbox_max, iPos, ShadowDirection, Medium, 4.0, SigmaT, RandSequence);
			if (VdbPrincipledParams.ColoredTransmittance == 0)
			{
				ShadowTransmittance = Average(ShadowTransmittance);
			}
			
			float3 WorldDir = IndexToWorldDirection(ShadowDirection, VdbPrincipledParams.LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
			float3 EnvLight = GetSkySHDiffuse(WorldDir) * View.SkyLightColor.rgb;

			StepRadiance += StepTransmittance * Scattering * EnvLight * (ShadowTransmittance + VdbPrincipledParams.Ambient) * Color;
		}

#if USE_TEMPERATURE_VDB
		// Blackbody emissive
		float Temperature = SAMPLING_FLOAT_FILTERING(iPos, TemperatureSampler.GridBuffer, TemperatureSampler.GridType, TemperatureSampler.Accessor) * VdbPrincipledParams.Temperature;

		float3 TemperatureColor = 0.0;
		if (VdbPrincipledParams.CurveIndex >= 0)
		{
			// Sample user defined color curve
			float2 uv = float2(Temperature, (VdbPrincipledParams.CurveIndex + 0.5) / float(VdbPrincipledParams.CurveAtlasHeight));
			TemperatureColor = VdbPrincipledParams.BlackbodyCurveAtlas.SampleLevel(VdbPrincipledParams.LinearTexSampler, uv, 0).rgb;
		}
		else
		{
			// Use physically based temperature to color
			TemperatureColor = ColorTemperatureToRGB(Temperature);
		}

		StepRadiance += StepTransmittance * TemperatureColor * VdbPrincipledParams.BlackbodyTint * VdbPrincipledParams.BlackbodyIntensity;
#endif

		// Regular emissive
		StepRadiance += StepTransmittance * VdbPrincipledParams.EmissionStrength * VdbPrincipledParams.EmissionColor;

		Radiance += StepRadiance;

		Transmittance *= exp(-StepWorldMeters * Extinction);

		if (all(Transmittance < VdbPrincipledParams.Threshold))
		{
			Transmittance = 0.0f;
			break;
		}
	}

	return float4(Radiance, 1.0 - Average(Transmittance));
}


float4 VdbFogVolume(uint2 LaunchIndex)
{
	float DeviceZ = SceneDepthTexture.Load(int3(LaunchIndex, 0)).x;

	// ------------------------------------------------------------------------------------------------------
	// Prepare NanoVDB

	VdbSampler DensitySampler = InitVdbSampler(VdbPrincipledParams.VdbDensity);
#if USE_TEMPERATURE_VDB
	VdbSampler TemperatureSampler = InitVdbSampler(VdbPrincipledParams.VdbTemperature);
#endif
#if USE_COLOR_VDB
	VdbSampler ColorSampler = InitVdbSampler(VdbPrincipledParams.VdbColor);
#endif

	// Global values (could be computed on CPU, and passed to shader instead)
	float root_min_val = pnanovdb_read_float(DensitySampler.GridBuffer, pnanovdb_root_get_min_address(DensitySampler.GridType, DensitySampler.GridBuffer, DensitySampler.Root));
	float root_max_val = pnanovdb_read_float(DensitySampler.GridBuffer, pnanovdb_root_get_max_address(DensitySampler.GridType, DensitySampler.GridBuffer, DensitySampler.Root));
	pnanovdb_vec3_t bbox_min = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_min(DensitySampler.GridBuffer, DensitySampler.Root));
	pnanovdb_vec3_t bbox_max = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_max(DensitySampler.GridBuffer, DensitySampler.Root));

	// ------------------------------------------------------------------------------------------------------
	// Prepare variables

	HeterogenousMedium Medium;
	Medium.densityScale = VdbPrincipledParams.DensityMult;
	Medium.densityMin = root_min_val * Medium.densityScale;
	Medium.densityMax = root_max_val * Medium.densityScale;
	Medium.anisotropy = VdbPrincipledParams.Anisotropy;
	Medium.albedo = VdbPrincipledParams.Albedo;

	float4 Radiance = 0.0;

	// ------------------------------------------------------------------------------------------------------
	// Trace rays and accumulate

	uint LinearIndex = LaunchIndex.y * uint(View.BufferSizeAndInvSize.x) + LaunchIndex.x;

	LOOP for (uint SampleIndex = 0; SampleIndex < VdbPrincipledParams.SamplesPerPixel; ++SampleIndex)
	{
		RandomSequence RandSequence;

		if (VdbPrincipledParams.TemporalNoise)
		{
			// Different seed per frame (StateFrameIndex), per PT accumulation (NumAccumulations) and even per sub-frame (Random) for inter-frame movie render queue AA
			RandomSequence_Initialize(RandSequence, LaunchIndex.xy, SampleIndex, View.StateFrameIndex + NumAccumulations + View.Random, VdbPrincipledParams.SamplesPerPixel);
		}
		else
		{
			RandomSequence_Initialize(RandSequence, LinearIndex, SampleIndex + (NumAccumulations + 1) * VdbPrincipledParams.SamplesPerPixel);
		}

#if PATH_TRACING
		float2 Jitter = PinholeRandomSample(RandSequence);
#else
		float2 Jitter = RandomSequence_GenerateSample2D(RandSequence) - 0.5;
#endif

		VdbRay Ray = PrepareRayFromPixel(DensitySampler.GridBuffer, DensitySampler.Grid, LaunchIndex.xy, uint2(View.BufferSizeAndInvSize.xy), Jitter, DeviceZ, VdbPrincipledParams.WorldToLocal); // index/vdb space

		Radiance += RaymarchVolume(	DensitySampler, 
									#if USE_TEMPERATURE_VDB
										TemperatureSampler, 
									#endif
									#if USE_COLOR_VDB
										ColorSampler,
									#endif
									bbox_min, 
									bbox_max, 
									Ray, 
									Medium, 
									RandSequence);
	}

	Radiance /= VdbPrincipledParams.SamplesPerPixel;

	return Radiance;
}

void MainPS(
	in float4 SvPosition : SV_POSITION, 
	out float4 OutColor : SV_Target0)
{
	float4 Radiance = VdbFogVolume(uint2(SvPosition.xy));
	Radiance.rgb *= View.PreExposure;
	
#if PATH_TRACING
	uint NumSamples = NumAccumulations + 1;
	float BlendFactor = 1.0 / float(NumSamples);
	// Reset if first Accumuluation
	float4 OldPixel = NumSamples > 1 ? PrevAccumTex[uint2(SvPosition.xy)] : 0.0;
	float4 NewRadiance = lerp(OldPixel, Radiance, BlendFactor);

	OutColor = NewRadiance;
#else
	OutColor = Radiance;
#endif
}

#else
	#error Wrong shader type
#endif
