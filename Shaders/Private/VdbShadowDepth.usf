// Copyright Thibault Lambert

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// needs to before Common.usf
#define SHADOW_DEPTH_SHADER 1
#define USE_STENCIL_LOD_DITHER	0

#ifndef ENABLE_NON_NANITE_VSM
	#error "ENABLE_NON_NANITE_VSM should be defined to either 0 or 1!"
#endif

#if ENABLE_NON_NANITE_VSM
	#define VIRTUAL_SM_ENABLED (!(ONEPASS_POINTLIGHT_SHADOW || PERSPECTIVE_CORRECT_DEPTH))
#else
	#define VIRTUAL_SM_ENABLED 0
#endif

#include "/Engine/Private/Nanite/NanitePackedNaniteView.ush"
#include "/Engine/Private/Common.ush"

// Reroute SceneTexturesStruct uniform buffer references to the shadow depth pass uniform buffer
#define PassStruct ShadowDepthPass
#define SceneTexturesStruct ShadowDepthPass.SceneTextures 

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#if VIRTUAL_SM_ENABLED
	#include "/Engine/Private/Nanite/NaniteDataDecode.ush"
	#include "/Engine/Private/SceneData.ush"
	#include "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
#endif

#define SECONDARY_OCCLUSION			1

int4 CustomIntData0;
int4 CustomIntData1;
float4 CustomFloatData0;
float4 CustomFloatData1;
float4 CustomFloatData2;
StructuredBuffer<uint> DensityVdbBuffer;
StructuredBuffer<uint> TemperatureVdbBuffer;
StructuredBuffer<uint> ColorVdbBuffer;
Texture2D BlackbodyColor; // curve atlas

#if VERTEXSHADER && ONEPASS_POINTLIGHT_SHADOW
	uint bUseGpuSceneInstancing;
	uint LayerId;
#endif

// I can't make a custom MaterialExpression from a plugin. 
// It's far from ideal but I have to adapt and use a 
// mix of material params, and component params.
#define MAX_NUM_STEPS uint(CustomIntData0.x)
#define SAMPLES_PER_PIXEL uint(CustomIntData0.y)
#define SAMPLES_PER_PIXEL_FLOAT float(CustomIntData0.y)
#define COLORED_TRANSMITTANCE bool(CustomIntData0.z) 
#define TEMPORAL_NOISE bool(CustomIntData0.w) 
#define CURVE_INDEX CustomIntData1.x
#define CURVE_HEIGHT CustomIntData1.y
#define TRANSLUCENT_LEVEL_SET CustomIntData1.z
#define LOCAL_STEP_SIZE CustomFloatData0.x
#define SHADOW_STEP_SIZE_MULT CustomFloatData0.y
#define VOXEL_SIZE CustomFloatData0.z
#define JITTER_MULT 0.0 // force no jittering
#define ANISOTROPY CustomFloatData1.x
#define ALBEDO CustomFloatData1.y
#define BLACKBODY_INTENSITY CustomFloatData1.z
#define BLACKBODY_TEMPERATURE CustomFloatData1.w
#define DENSITY_MULT CustomFloatData2.x
#define VOLUME_PADDING CustomFloatData2.y
#define AMBIENT CustomFloatData2.z

#define SAMPLING_FLOAT ReadValue
#define SAMPLING_VECTOR ReadValueVec3f
#if USE_TRILINEAR_SAMPLING
	#define SAMPLING_FLOAT_FILTERING TrilinearSampling
	#define SAMPLING_VECTOR_FILTERING TrilinearSamplingVec3f
#else
	#define SAMPLING_FLOAT_FILTERING SAMPLING_FLOAT
	#define SAMPLING_VECTOR_FILTERING SAMPLING_VECTOR
#endif

#include "/Plugin/VdbVolume/Private/VdbCommon.ush"
#include "/Plugin/VdbVolume/Private/VdbRaymarchingUtils.ush"
#include "/Plugin/VdbVolume/Private/VdbShadowDepthCommon.ush"

void SetShadowDepthOutputs(
	float4x4 WorldToClipMatrix,
	float4x4 WorldToShadowMatrix,
	float4 WorldPosition,
	float3 WorldVertexNormal,
	out float4 OutPosition,
	out float ShadowDepth
#if PERSPECTIVE_CORRECT_DEPTH
	, out float OutDepthBias
#endif
)
{
	OutPosition = mul(WorldPosition, WorldToClipMatrix);

	// Clamp the vertex to the near plane if it is in front of the near plane
	// This has problems if some vertices of a triangle get clamped and others do not, also causes artifacts with non-ortho projections
	if (PassStruct.bClampToNearPlane > 0 && OutPosition.z > OutPosition.w)
	{
		OutPosition.z = 0.999999f;
		OutPosition.w = 1.0f;
	}

#if ONEPASS_POINTLIGHT_SHADOW
	const float3 ViewDirection = -normalize(mul(WorldPosition, WorldToShadowMatrix).xyz);
	const float3 ViewNormal = mul(float4(WorldVertexNormal,0), WorldToShadowMatrix).xyz;
	const float NoL = abs(dot(ViewDirection, ViewNormal));
#else
	const float NoL = abs(dot(
		float3(WorldToShadowMatrix[0].z, WorldToShadowMatrix[1].z, WorldToShadowMatrix[2].z),
		WorldVertexNormal));
#endif

	const float MaxSlopeDepthBias = PassStruct.ShadowParams.z;
	const float Slope = clamp(abs(NoL) > 0 ? sqrt(saturate(1 - NoL * NoL)) / NoL : MaxSlopeDepthBias, 0, MaxSlopeDepthBias);
	
	const float SlopeDepthBias = PassStruct.ShadowParams.y;
	const float SlopeBias = SlopeDepthBias * Slope;

	const float ConstantDepthBias = PassStruct.ShadowParams.x;
	const float DepthBias = SlopeBias + ConstantDepthBias;

#if PERSPECTIVE_CORRECT_DEPTH
		ShadowDepth = OutPosition.z;
		OutDepthBias = DepthBias;
#elif ONEPASS_POINTLIGHT_SHADOW
		ShadowDepth = 0;
		//OutPosition.z += DepthBias;
#else
		// Output linear, normalized depth
	const float InvMaxSubjectDepth = PassStruct.ShadowParams.w;
	#if PLATFORM_NEEDS_PRECISE_SHADOW_DEPTH
		precise 
	#endif
	float AdjustedDepth = (1 - OutPosition.z * InvMaxSubjectDepth) + DepthBias;
	ShadowDepth = AdjustedDepth;
	OutPosition.z = AdjustedDepth;
#endif
}

/**
 * Load physical page offset and perform the needed scale and bias to render the instance into the given physical page,
 * with the correct clipping set up.
 */
#if VIRTUAL_SM_ENABLED

void ScaleBiasClipToPhysicalSmPage(FNaniteView NaniteView, inout float4 PositionClip, inout float4 ClipPlanesInOut, FPageInfo PageInfo)
{
	float2 vClip = PositionClip.xy;
	float2 vUV = vClip * float2(0.5, -0.5) + 0.5 * PositionClip.w;
	float2 vPixels = vUV * (uint(VSM_VIRTUAL_MAX_RESOLUTION_XY) >> NaniteView.TargetMipLevel);

	{
		//PointClip.xy = NaniteView.ClipSpaceScaleOffset.xy * PointClip.xy + NaniteView.ClipSpaceScaleOffset.zw * PointClip.w;

		float2 Scale = exp2(-NaniteView.TargetMipLevel);
		PositionClip.xy *= Scale;
		PositionClip.xy += (Scale * float2(1, -1) + float2(-1, 1)) * PositionClip.w;
	}

	{
		// Clip to allocated page rect
		uint4 PageRect = PassStruct.PageRectBounds[NaniteView.TargetLayerIndex * VSM_MAX_MIP_LEVELS + NaniteView.TargetMipLevel];

		float2 MinClip = vPixels - (PageRect.xy + 0) * VSM_PAGE_SIZE * PositionClip.w;
		float2 MaxClip = -vPixels + (PageRect.zw + 1) * VSM_PAGE_SIZE * PositionClip.w;

		ClipPlanesInOut.xy = MinClip;
		ClipPlanesInOut.zw = MaxClip;
	}
}

void TransformToVirtualSmPage(inout float4 PointClip, inout float4 ClipPlanesInOut, FPageInfo PageInfo, float3 PointTranslatedWorld)
{
	// Load nanite view and perform transform to SM space.
	FNaniteView NaniteView = UnpackNaniteView(PassStruct.PackedNaniteViews[PageInfo.ViewId]);

	PointTranslatedWorld += LWCToFloat(LWCSubtract(NaniteView.PreViewTranslation, ResolvedView.PreViewTranslation));
	PointClip = mul(float4(PointTranslatedWorld, 1), NaniteView.TranslatedWorldToClip);

	// Clamp the vertex to the near plane if it is in front of the near plane
	// This has problems if some vertices of a triangle get clamped and others do not, also causes artifacts with non-ortho projections
	if (PassStruct.bClampToNearPlane > 0 && PointClip.z > PointClip.w)
	{
		PointClip.z = 0.999999f;
		PointClip.w = 1.0f;
	}

	ScaleBiasClipToPhysicalSmPage(NaniteView, PointClip, ClipPlanesInOut, PageInfo);
}

#endif // VIRTUAL_SM_ENABLED

//-----------------------------------------------------------------------------------------------------------
#if VERTEXSHADER
//-----------------------------------------------------------------------------------------------------------

void MainVS(
	FVertexFactoryInput Input,
	out FShadowDepthVSToPS OutParameters,
	#if VIRTUAL_SM_ENABLED
		out nointerpolation uint PackedPageInfo : TEXCOORD8,
	#endif
	out float4 OutPosition : SV_POSITION
	#if ONEPASS_POINTLIGHT_SHADOW
		, out uint LayerIndex : SV_RenderTargetArrayIndex
	#endif
	#if VIRTUAL_SM_ENABLED	
		// OLA-TODO: this collides with instanced stereo, which thankfully is not used with shadow maps, so should be fine, presumably.
		, out float4 OutVirtualSmPageClip : SV_ClipDistance
	#endif // VIRTUAL_SM_ENABLED
	)
{
	ResolvedView = ResolveView();

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 TranslatedWorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, TranslatedWorldPos.xyz, TangentToLocal);
	const float3 WorldNormal = VertexFactoryGetWorldNormal(Input, VFIntermediates);

	#if ONEPASS_POINTLIGHT_SHADOW
		OutPosition = TranslatedWorldPos;

		#if INTERPOLATE_VF_ATTRIBUTES
			// Masked materials need texture coords to clip
			OutParameters.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
		#endif

		#if INTERPOLATE_POSITION
			OutParameters.PixelPosition = TranslatedWorldPos.xyz;
		#endif

		LayerIndex = bUseGpuSceneInstancing ? VertexFactoryGetViewIndex(VFIntermediates) : LayerId;
		OutPosition = mul(TranslatedWorldPos, PassStruct.ShadowViewProjectionMatrices[LayerIndex]);
	
	#else
		float Dummy;

		SetShadowDepthOutputs(
			PassStruct.ProjectionMatrix, // TranslatedWorldToClipOuterMatrix, including preview translation to pre shadow
			PassStruct.ViewMatrix, // Translated world to view
			TranslatedWorldPos, // translated world
			WorldNormal,
			OutPosition,
			#if !PERSPECTIVE_CORRECT_DEPTH
				Dummy
			#else
				OutParameters.ShadowDepth,
				OutParameters.DepthBias
			#endif
			);
	
		#if INTERPOLATE_VF_ATTRIBUTES
			// Masked materials need texture coords to clip
			OutParameters.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
		#endif

		#if INTERPOLATE_POSITION
			OutParameters.PixelPosition = TranslatedWorldPos.xyz;
		#endif

		#if !PERSPECTIVE_CORRECT_DEPTH && !COMPILER_SUPPORTS_EMPTY_STRUCTS
			OutParameters.Dummy = 0;
		#endif
	
	#endif

	#if VIRTUAL_SM_ENABLED
		PackedPageInfo = 0;
	
		OutVirtualSmPageClip = float4(1.0f, 1.0f, 1.0f, 1.0f);
		if (PassStruct.bRenderToVirtualShadowMap != 0)
		{
			// Get the offset from which we loaded the instance ID
			uint InstanceIdIndex = VertexFactoryGetInstanceIdLoadIndex(VFIntermediates);
			PackedPageInfo = InstanceCulling.PageInfoBuffer[InstanceIdIndex];

			FPageInfo PageInfo = UnpackPageInfo(PackedPageInfo);

			TransformToVirtualSmPage(OutPosition, OutVirtualSmPageClip, PageInfo, TranslatedWorldPos.xyz);
		}
	#endif // VIRTUAL_SM_ENABLED
}

//-----------------------------------------------------------------------------------------------------------
#elif PIXELSHADER
//-----------------------------------------------------------------------------------------------------------

void MainPS(
	FShadowDepthVSToPS Inputs,
#if VIRTUAL_SM_ENABLED
	nointerpolation uint PackedPageInfo : TEXCOORD8,
#endif
	in float4 SvPosition : SV_Position // after all interpolators
#if ONEPASS_POINTLIGHT_SHADOW
	, in uint LayerIndex : SV_RenderTargetArrayIndex
#endif
#if PERSPECTIVE_CORRECT_DEPTH || COMPILER_METAL || INTERPOLATE_VF_ATTRIBUTES
	, out float OutDepth : SV_DEPTH
#endif
	)
{
	ResolvedView = ResolveView();
	  
#if INTERPOLATE_VF_ATTRIBUTES
	
	float3 LastIntersection = 0.0;
	float3 Transmittance = GetVdbTransmittance(
		Inputs.FactoryInterpolants, 
		SvPosition, 
#if ONEPASS_POINTLIGHT_SHADOW
		LayerIndex,
#endif
		LastIntersection);
	bool Valid = all(Transmittance <= 1.0 - GetMaterialOpacityMaskClipValue());
	
	if (!Valid) discard;
	
	float4 TranslatedWorldPos = float4(LastIntersection.xyz, 1.0);
	#if ONEPASS_POINTLIGHT_SHADOW
		float4 ClipPos = mul(TranslatedWorldPos, PassStruct.ShadowViewProjectionMatrices[LayerIndex]);
		OutDepth = ClipPos.z / ClipPos.w;
	#else
		float4 OutPosition;
		float OutDepthZ;
		float OutDepthBias;
	
		SetShadowDepthOutputs(
			PassStruct.ProjectionMatrix, // TranslatedWorldToClipOuterMatrix, including preview translation to pre shadow
			PassStruct.ViewMatrix, // Translated world to view
			TranslatedWorldPos, // translated world
			0.0,
			OutPosition,
			OutDepthZ
			#if PERSPECTIVE_CORRECT_DEPTH
				, OutDepthBias
			#endif
			);
		OutDepth = OutPosition.z;
	#endif
	
#else
	ClipLODTransition(SvPosition.xy);
#endif

#if PERSPECTIVE_CORRECT_DEPTH
	const float InvMaxSubjectDepth = PassStruct.ShadowParams.w;
	Inputs.ShadowDepth = 1 - Inputs.ShadowDepth * InvMaxSubjectDepth;
	Inputs.ShadowDepth += Inputs.DepthBias;

	OutDepth = saturate(Inputs.ShadowDepth);
#elif COMPILER_METAL
	// Metal fragment shader must not be empty,
	// so output depth value explicitly if this shader permuation was not discarded
	OutDepth = SvPosition.z;
#endif

#if ENABLE_NON_NANITE_VSM && VIRTUAL_TEXTURE_TARGET
	uint2 vAddress = (uint2)SvPosition.xy;
	float DeviceZ = SvPosition.z;

	FPageInfo PageInfo = UnpackPageInfo( PackedPageInfo );
	FNaniteView NaniteView = UnpackNaniteView( PassStruct.PackedNaniteViews[ PageInfo.ViewId ] );

	FShadowPhysicalPage Page = ShadowDecodePageTable( PassStruct.VirtualSmPageTable[ CalcPageOffset( NaniteView.TargetLayerIndex, NaniteView.TargetMipLevel, vAddress >> VSM_LOG2_PAGE_SIZE ) ] );

	if( Page.bThisLODValid )
	{
		uint2 pAddress = Page.PhysicalAddress * VSM_PAGE_SIZE + (vAddress & VSM_PAGE_SIZE_MASK);
		// If requested, render to the static page
		const int ArrayIndex = PageInfo.bStaticPage ? GetVirtualShadowMapStaticArrayIndex() : 0;
		InterlockedMax( PassStruct.OutDepthBufferArray[ uint3( pAddress, ArrayIndex ) ], asuint( DeviceZ ) );
	}
#endif
}

#endif