// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef D_VDB_MATERIAL_COMMON
#define D_VDB_MATERIAL_COMMON

half3 SampleDisplacement(in FPixelMaterialInputs PixelMaterialInputs)
{
	// w value is not set. don't try to use it
	half3 Displacement = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs).xyz;
	return Displacement;
}

half3 SampleEmissive(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);
	return clamp(EmissiveColor, 0.0f, 65000.0f);
}

// RGB is volume scattering color
half3 SampleScattering(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 Scattering = 1.0;
#if !MATERIAL_SHADINGMODEL_UNLIT
	Scattering = GetMaterialBaseColorRaw(PixelMaterialInputs).rgb;
#endif
	return Scattering;
}

// Copy of the Unreal material node.
// I'm missing slots in the material, that's why I have to pack and unpack data
float2 UnpackTwoNormalizedFloat(float PackedFloat)
{
	int Precision = 4096;

	float2 Output = 0;
	Output.y = fmod(PackedFloat, Precision);
	Output.x = floor(PackedFloat / Precision);
	Output /= (Precision - 1);
	return Output;
}

// Custom density modifications to the VdbDensity volume
float2 SampleDensityModifications(in FPixelMaterialInputs PixelMaterialInputs)
{
	float AO = GetMaterialAmbientOcclusionRaw(PixelMaterialInputs);
	return UnpackTwoNormalizedFloat(AO);
}

float UpdateDensity(float Density, float DensityMult, float2 DensityModifications)
{
	return max(Density * DensityModifications.x, DensityModifications.y) * DensityMult;
}

// Raymarch towards light. Compute shadow transmittance
float3 GetLightTransmittance(
	float3 pos, // index space
	float3 dir, // index space
	VdbSampler Sampler,
	float3 bbox_min,
	float3 bbox_max,
	float StepMultiplier,
	float4x4 LocalToWorld,
	float Threshold,
	in out RandomSequence RandSequence,
	in out float FirstIntersection,
	FMaterialPixelParameters MaterialParameters)
{
	VdbRay Ray;
	Ray.Origin = pos;
	Ray.Direction = dir;
	Ray.TMin = 0.0001f; // DeltaFloat;
	Ray.TMax = POSITIVE_INFINITY;
	FirstIntersection = POSITIVE_INFINITY;

	if (!CheckBounds(Ray, bbox_min - VOLUME_PADDING, bbox_max + VOLUME_PADDING))
		return 1.0f;

	float RaymarchDistance = Ray.TMax - Ray.TMin;
	float StepSize = (LOCAL_STEP_SIZE * StepMultiplier) / VOXEL_SIZE; // Index Space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), MAX_NUM_STEPS);
	float StepWorldMeters = (LOCAL_STEP_SIZE * StepMultiplier) * CENTIMETER_TO_METER;

	FPixelMaterialInputs PixelMaterialInputs = (FPixelMaterialInputs)0;

	float3 Transmittance = 1.0;

	float AccumDensity = 0.0;
	for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		float s = Ray.TMin + (iStep + lerp(0.5, RandomSequence_GenerateSample1D(RandSequence), JITTER_MULT)) * StepSize;
		float3 iPos = pnanovdb_hdda_ray_start(Ray.Origin, s, Ray.Direction);

		// Update coordinates
		float3 WorldPos = IndexToWorldPosition(iPos, LocalToWorld, Sampler.GridBuffer, Sampler.Grid);
		float3 TranslatedWorldPos = LWCToFloat(LWCAdd(WorldPos, PrimaryView.PreViewTranslation));

		float4 ClipPos = mul(float4(TranslatedWorldPos, 1.0), PrimaryView.TranslatedWorldToClip);
		float4 SvPosition = ClipPos / ClipPos.w;
		SvPosition.xy = (0.5 * SvPosition.xy + 0.5) * PrimaryView.BufferSizeAndInvSize.xy;

		CalcMaterialParametersEx(
			MaterialParameters, PixelMaterialInputs,
			SvPosition, SvPositionToScreenPosition(SvPosition),
			true,
			TranslatedWorldPos, TranslatedWorldPos);

		// Only sample Density related attributes
		half3 Displacement = SampleDisplacement(PixelMaterialInputs);
		half3 SigmaT = SampleScattering(PixelMaterialInputs);
		float2 DensityModifications = SampleDensityModifications(PixelMaterialInputs);

		float Density = ReadValue(iPos - Displacement, Sampler.GridBuffer, Sampler.GridType, Sampler.Accessor);
#if LEVEL_SET
		Density = Density < 0.0 ? 1.0 : 0.0;
#else
		Density = UpdateDensity(Density, DENSITY_MULT, DensityModifications);
#endif

		if (Density != 0.0)
		{
			FirstIntersection = min(FirstIntersection, s);
		}

		Transmittance *= exp(-StepWorldMeters * Density * SigmaT);
		if (all(Transmittance < Threshold))
		{
			Transmittance = 0.0;
			break;
		}
	}
	return Transmittance;
}

#endif // D_VDB_MATERIAL_COMMON
