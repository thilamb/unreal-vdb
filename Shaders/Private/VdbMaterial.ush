// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef D_VDB_MATERIAL_COMMON
#define D_VDB_MATERIAL_COMMON

half3 SampleDisplacement(in FPixelMaterialInputs PixelMaterialInputs)
{
	// w value is not set. don't try to use it
	half3 Displacement = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs).xyz;
	return Displacement;
}

half3 SampleEmissive(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);
	return clamp(EmissiveColor, 0.0f, 65000.0f);
}

// RGB is volume scattering color
half3 SampleScattering(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 Scattering = 1.0;
#if !MATERIAL_SHADINGMODEL_UNLIT
	Scattering = GetMaterialBaseColorRaw(PixelMaterialInputs).rgb;
#endif
	return Scattering;
}

// Copy of the Unreal material node.
// I'm missing slots in the material, that's why I have to pack and unpack data
float2 UnpackTwoNormalizedFloat(float PackedFloat)
{
	int Precision = 4096;

	float2 Output = 0;
	Output.y = fmod(PackedFloat, Precision);
	Output.x = floor(PackedFloat / Precision);
	Output /= (Precision - 1);
	return Output;
}

// Custom density modifications to the VdbDensity volume
float2 SampleDensityModifications(in FPixelMaterialInputs PixelMaterialInputs)
{
	float AO = GetMaterialAmbientOcclusionRaw(PixelMaterialInputs);
	return UnpackTwoNormalizedFloat(AO);
}

float UpdateDensity(float Density, float DensityMult, float2 DensityModifications)
{
	return max(Density * DensityModifications.x, DensityModifications.y) * DensityMult;
}

#endif // D_VDB_MATERIAL_COMMON
