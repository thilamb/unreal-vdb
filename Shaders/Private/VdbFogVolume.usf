// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/Random.ush"
#include "/Engine/Private/ReflectionEnvironmentShared.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#define DeferredLightUniforms VdbParams.DeferredLight
#define LumenGIVolumeStruct VdbParams.LumenGIVolumeStruct
#include "/Engine/Private/DeferredLightingCommon.ush"
#include "/Engine/Private/LightDataUniforms.ush"
#include "/Engine/Private/SHCommon.ush"
#include "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"

int4 CustomIntData0;
int4 CustomIntData1;
float4 CustomFloatData0;
float4 CustomFloatData1;
float4 CustomFloatData2;
StructuredBuffer<uint>	DensityVdbBuffer;
StructuredBuffer<uint>	TemperatureVdbBuffer;
StructuredBuffer<uint>	ColorVdbBuffer;
Texture2D				BlackbodyColor; // curve atlas

// I can't make a custom MaterialExpression from a plugin. 
// It's far from ideal but I have to adapt and use a 
// mix of material params, and component params.
#define MAX_NUM_STEPS uint(CustomIntData0.x)
#define SAMPLES_PER_PIXEL uint(CustomIntData0.y)
#define SAMPLES_PER_PIXEL_FLOAT float(CustomIntData0.y)
#define COLORED_TRANSMITTANCE bool(CustomIntData0.z) 
#define TEMPORAL_NOISE bool(CustomIntData0.w) 
#define CURVE_INDEX CustomIntData1.x
#define CURVE_HEIGHT CustomIntData1.y
#define LOCAL_STEP_SIZE CustomFloatData0.x
#define SHADOW_STEP_SIZE_MULT CustomFloatData0.y
#define VOXEL_SIZE CustomFloatData0.z
#define JITTER_MULT CustomFloatData0.w
#define ANISOTROPY CustomFloatData1.x
#define ALBEDO CustomFloatData1.y
#define BLACKBODY_INTENSITY CustomFloatData1.z
#define BLACKBODY_TEMPERATURE CustomFloatData1.w
#define DENSITY_MULT CustomFloatData2.x
#define VOLUME_PADDING CustomFloatData2.y
#define AMBIENT CustomFloatData2.z

#define SAMPLING_FLOAT ReadValue
#define SAMPLING_VECTOR ReadValueVec3f
#if USE_TRILINEAR_SAMPLING
	#define SAMPLING_FLOAT_FILTERING TrilinearSampling
	#define SAMPLING_VECTOR_FILTERING TrilinearSamplingVec3f
#else
	#define SAMPLING_FLOAT_FILTERING SAMPLING_FLOAT
	#define SAMPLING_VECTOR_FILTERING SAMPLING_VECTOR
#endif

#include "/Plugin/VdbVolume/Private/VdbCommon.ush"
#include "/Plugin/VdbVolume/Private/VdbMaterial.ush"
#include "/Plugin/VdbVolume/Private/VdbRaymarchingUtils.ush"

#define DIM_USE_LUMEN_GI 1 // TODO use permutations

//-----------------------------------------------------------------------------------------------------------
// Tracing through a NanoVDB volume
//-----------------------------------------------------------------------------------------------------------

float4 RaymarchFogVolume(
	VdbSampler DensitySampler,
#if USE_TEMPERATURE_VDB
	VdbSampler TemperatureSampler,
#endif
#if USE_COLOR_VDB
	VdbSampler ColorSampler,
#endif
	VdbRay Ray,
	float DeviceZ,
	RandomSequence RandSequence,
	FMaterialPixelParameters MaterialParameters,
	float4x4 LocalToWorld,
	float4x4 WorldToLocal,
	float4 SvPosition,
	out float3 FirstIntersection)
{
	// ------------------------------------------------------------------------
	// Test against volume, and update Ray start/end to fit volume

	if (!CheckBounds(Ray, DensitySampler.MinBounds - VOLUME_PADDING, DensitySampler.MaxBounds + VOLUME_PADDING))
		return float4(0.0, 0.0, 0.0, 0.0);

	// ------------------------------------------------------------------------
	// Set up lighting

	float3 Transmittance = 1.f;
	float3 Radiance = 0.0;

	#if !MATERIAL_SHADINGMODEL_UNLIT
		FDeferredLightData LightData = InitDeferredLightFromUniforms(VdbParams.LightType);

		float3 LocalDirLight = WorldToIndexDirection(LightData.Direction, WorldToLocal, DensitySampler.GridBuffer, DensitySampler.Grid);
		float CosThetaPhase = dot(LocalDirLight, Ray.Direction);

		float3 EnvLight = GetSkySHDiffuseSimple(float3(0.0f, 0.0f, 0.0f)) * View.SkyLightColor.rgb; // without SH directionality
	#endif

	// ------------------------------------------------------------------------
	// Raymarch with fixed steps

	float StepSize = LOCAL_STEP_SIZE / VOXEL_SIZE; // Index space
	float RaymarchDistance = Ray.TMax - Ray.TMin; // Index space
	const uint NumSteps = min(ceil(RaymarchDistance / StepSize), MAX_NUM_STEPS);
	float StepWorldMeters = LOCAL_STEP_SIZE * CENTIMETER_TO_METER;
	float MinDistLocal = POSITIVE_INFINITY;

	FPixelMaterialInputs PixelMaterialInputs = (FPixelMaterialInputs)0;

	LOOP
	for (uint iStep = 0; iStep < NumSteps; ++iStep)
	{
		// ------------------------------------------------------------------------
		// Get Intersection if any

		float LocalDist = Ray.TMin + (iStep + lerp(0.5, RandomSequence_GenerateSample1D(RandSequence), JITTER_MULT)) * StepSize;

		// ------------------------------------------------------------------------
		// Update coordinates

		float3 LocalPosition = pnanovdb_hdda_ray_start(Ray.Origin, LocalDist, Ray.Direction);
		float3 WorldPos = IndexToWorldPosition(LocalPosition, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
		float3 TranslatedWorldPos = LWCToFloat(LWCAdd(WorldPos, PrimaryView.PreViewTranslation));

		// ------------------------------------------------------------------------
		// Sample material
		CalcMaterialParametersEx(
			MaterialParameters, PixelMaterialInputs,
			SvPosition, SvPositionToScreenPosition(SvPosition),
			true,
			TranslatedWorldPos, TranslatedWorldPos);

		half3 EmissiveColor = SampleEmissive(PixelMaterialInputs);
		half3 SigmaT = SampleScattering(PixelMaterialInputs);
		half3 Displacement = SampleDisplacement(PixelMaterialInputs);
		float2 DensityModifications = SampleDensityModifications(PixelMaterialInputs);

		float Density = SAMPLING_FLOAT_FILTERING(LocalPosition - Displacement, DensitySampler.GridBuffer, DensitySampler.GridType, DensitySampler.Accessor);
		Density = UpdateDensity(Density, DENSITY_MULT, DensityModifications);
		Density = max(Density, 0.0);

		// ------------------------------------------------------------------------
		// Compute scattering coefficients

		float3 Extinction = SigmaT * Density;
		float3 Scattering = Extinction * ALBEDO; // aka SigmaS * Density

		// ------------------------------------------------------------------------
		// Compute local Step Transmittance 

		float3 SimpleStepTransmittance = Transmittance * StepWorldMeters;
#ifdef ANALYTIC_INTEGRATION
		Extinction = max(Extinction, 0.00000001);
		float3 TransmittanceIntegral = (1.0 - exp(-StepWorldMeters * Extinction)) / Extinction;
		float3 StepTransmittance = Transmittance * TransmittanceIntegral;
#else
		float3 StepTransmittance = SimpleStepTransmittance;
#endif
		if (!COLORED_TRANSMITTANCE)
		{
			// Using average instead of float3 value, to avoid weird color shifts and be more user-friendly
			StepTransmittance = Average(StepTransmittance);
			SimpleStepTransmittance = Average(SimpleStepTransmittance);
		}

		// ------------------------------------------------------------------------
		// Purely emissive blackbodies, only on first light pass

		if (VdbParams.bApplyEmissionAndTransmittance)
		{
#if USE_TEMPERATURE_VDB
			// Second VDB buffer should be Temperature to simulate a blackbody volume
			float Temperature = SAMPLING_FLOAT_FILTERING(LocalPosition, TemperatureSampler.GridBuffer, TemperatureSampler.GridType, TemperatureSampler.Accessor) * BLACKBODY_TEMPERATURE;
			float3 TemperatureColor = 0.0;
			if (CURVE_INDEX >= 0)
			{
				// Sample user defined color curve
				float2 uv = float2(Temperature, (CURVE_INDEX + 0.5) / float(CURVE_HEIGHT));
				TemperatureColor = BlackbodyColor.Sample(VdbParams.LinearTexSampler, uv).rgb;
			}
			else
			{
				// Use physically based temperature to color
				TemperatureColor = ColorTemperatureToRGB(Temperature);
			}

			// Use "simple" non-analytic step transmission because we don't want it to be influenced by extinction as blackbodies are pure emissive
			Radiance += SimpleStepTransmittance * TemperatureColor * BLACKBODY_INTENSITY;
#endif
			// Regular emissive
			Radiance += StepTransmittance * EmissiveColor;
		}

		if (Density == 0.0) continue;

		MinDistLocal = min(MinDistLocal, LocalDist);

		// ------------------------------------------------------------------------
		// Compute scattering light & shadows

#if !MATERIAL_SHADINGMODEL_UNLIT
	#if USE_COLOR_VDB
		// Only using input VDB color as a color tint
		Scattering *= SAMPLING_VECTOR_FILTERING(LocalPosition, ColorSampler.GridBuffer, ColorSampler.GridType, ColorSampler.Accessor);
	#endif

		if (VdbParams.bApplyDirectLighting)
		{
			float3 ShadowTransmittance = GetInscattering(
				DensitySampler,
				SHADOW_STEP_SIZE_MULT,
				VdbParams.Threshold,
				LocalToWorld, WorldToLocal,
				RandSequence, MaterialParameters,
				LocalPosition, TranslatedWorldPos,
				LightData, VdbParams.LightType, LocalDirLight,
				VdbParams.bApplyShadowTransmittance);

			Radiance += StepTransmittance * Scattering * ShadowTransmittance * PhaseHG(CosThetaPhase, ANISOTROPY);
		}

		if (VdbParams.bApplyEmissionAndTransmittance)
		{
			// Ambient light contribution (skylight aka environment light)
	
	#if NICER_BUT_EXPENSIVE_ENVLIGHT
			// Random sample in entire sphere direction to capture Ambient environment
			float MinDistLocal = 0.0;
			float2 rnd = RandomSequence_GenerateSample2D(RandSequence);
			float3 ShadowDirection = SampleHenyeyGreenstein(0.0, rnd.x, rnd.y);
			float3 ShadowTransmittance = GetTransmittance(
				LocalPosition, ShadowDirection,
				DensitySampler,
				2.0 * SHADOW_STEP_SIZE_MULT,
				LocalToWorld, VdbParams.Threshold, RandSequence, MinDistLocal, MaterialParameters);
			if (!COLORED_TRANSMITTANCE)
			{
				ShadowTransmittance = Average(ShadowTransmittance);
			}

			float3 WorldDir = IndexToWorldDirection(ShadowDirection, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
			EnvLight = GetSkySHDiffuse(WorldDir) * View.SkyLightColor.rgb;

			Radiance += StepTransmittance * Scattering * EnvLight * (ShadowTransmittance + AMBIENT);
	#else
			Radiance += StepTransmittance * Scattering * EnvLight * (1.0 + AMBIENT);
	#endif
		
	#if DIM_USE_LUMEN_GI
			FTwoBandSHVectorRGB TranslucencyGISH = GetTranslucencyGIVolumeLighting(LWCPromote(WorldPos), PrimaryView.WorldToClip, true);

		#if NICER_BUT_EXPENSIVE_ENVLIGHT
			FTwoBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH(WorldDir, 1);
			float3 IndirectInscattering = max(DotSH(TranslucencyGISH, DiffuseTransferSH), 0.0) * ShadowTransmittance;
		#else
			float3 CameraWorldDir = IndexToWorldDirection(Ray.Direction, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);

			float PhaseG = 0.0; 
			FTwoBandSHVector RotatedHGZonalHarmonic;
			RotatedHGZonalHarmonic.V = float4(1.0f, CameraWorldDir.y, CameraWorldDir.z, CameraWorldDir.x) * float4(1.0f, PhaseG, PhaseG, PhaseG);
			float3 IndirectInscattering = max(DotSH(TranslucencyGISH, RotatedHGZonalHarmonic), 0);
		#endif	

			// Note: Phase is accounted for in spherical hamonic calculation
			Radiance += StepTransmittance * Scattering * IndirectInscattering;
	#endif // DIM_USE_LUMEN_GI
		}

#endif

		// ------------------------------------------------------------------------
		// Update Transmittance

		Transmittance *= exp(-StepWorldMeters * Extinction);

		if (all(Transmittance < VdbParams.Threshold))
		{
			Transmittance = 0.0;
			break;
		}
	}
	
	// Re-doing computation at the end to avoid weird issue when trilinear sampling is enabled.
	pnanovdb_vec3_t LocalPosition = pnanovdb_hdda_ray_start(Ray.Origin, MinDistLocal, Ray.Direction);
	float3 WorldPos = IndexToWorldPosition(LocalPosition, LocalToWorld, DensitySampler.GridBuffer, DensitySampler.Grid);
	FirstIntersection = LWCToFloat(LWCAdd(WorldPos, PrimaryView.PreViewTranslation));
	
	return float4(Radiance, 1.0 - Average(Transmittance));
}

//-----------------------------------------------------------------------------
//#if PIXELSHADER
//-----------------------------------------------------------------------------

void MainPS(in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position,
	in FVertexFactoryInterpolantsVSToPS FactoryInterpolants,
	out float4 OutColor0 : SV_Target0,
	out float OutDepth : SV_Depth // TODO: make this shader variation
)
{
	ResolvedView = ResolveView();

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);

	uint PrimId = VertexFactoryGetPrimitiveId(FactoryInterpolants);
	float4x4 WorldToLocal = LWCHackToFloat(GetPrimitiveData(PrimId).WorldToLocal);
	float4x4 LocalToWorld = LWCHackToFloat(GetPrimitiveData(PrimId).LocalToWorld);

	float DeviceZ = VdbParams.SceneDepthTexture.Load(int3(SvPosition.xy, 0)).x; // backbuffer depth

	// ------------------------------------------------------------------------
	// Prepare NanoVDB

	VdbSampler DensitySampler = InitVdbSampler(DensityVdbBuffer);
#if USE_TEMPERATURE_VDB
	VdbSampler TemperatureSampler = InitVdbSampler(TemperatureVdbBuffer);
#endif
#if USE_COLOR_VDB
	VdbSampler ColorSampler = InitVdbSampler(ColorVdbBuffer);
#endif

	// ------------------------------------------------------------------------
	// Prepare variables

	float4 Radiance = 0.0;

	uint LinearIndex = SvPosition.y * ResolvedView.BufferSizeAndInvSize.x + SvPosition.x;

	float3 FirstIntersection = 0.0; // Translated world space

	// ------------------------------------------------------------------------
	// Trace rays and accumulate
	
	for (uint SampleIndex = 0; SampleIndex < SAMPLES_PER_PIXEL; ++SampleIndex)
	{
		RandomSequence RandSequence;
		float2 Jitter = 0.0;

		if (TEMPORAL_NOISE)
		{
			// Different seed per frame (StateFrameIndex) and even per sub-frame (Random) for inter-frame movie render queue AA
			RandomSequence_Initialize(RandSequence, SvPosition.xy, SampleIndex, ResolvedView.StateFrameIndex + ResolvedView.Random, SAMPLES_PER_PIXEL);
			Jitter = RandomSequence_GenerateSample2D(RandSequence) - 0.5;
		}
		else
		{
			RandomSequence_Initialize(RandSequence, LinearIndex, SampleIndex);
			Jitter = (SampleIndex > 0) ? RandomSequence_GenerateSample2D(RandSequence) - 0.5 : 0.0;
		}

		VdbRay iRay = PrepareRayFromPixel(DensitySampler.GridBuffer, DensitySampler.Grid, SvPosition.xy, ResolvedView.BufferSizeAndInvSize.xy, Jitter, DeviceZ, WorldToLocal); // index/vdb space

		Radiance += RaymarchFogVolume(
							DensitySampler,
							#if USE_TEMPERATURE_VDB
								TemperatureSampler,
							#endif
							#if USE_COLOR_VDB
								ColorSampler,
							#endif
							iRay, DeviceZ,
							RandSequence, MaterialParameters,
							LocalToWorld, WorldToLocal, SvPosition, FirstIntersection);
	}

	Radiance /= SAMPLES_PER_PIXEL_FLOAT;

	if (Radiance.a == 0.0f)
	{
		discard;
	}

	Radiance.rgb *= ResolvedView.RealTimeReflectionCapture ? ResolvedView.RealTimeReflectionCapturePreExposure : ResolvedView.PreExposure;

	OutColor0 = Radiance;

	// Output Depth to improve TAA and TSR. This will cause issues when VDB is transparent but we'll live with the consequences. 
	// TODO: make this a shader variation.
	float SceneDepth = 1.0;
	if (any(FirstIntersection != 0.0))
	{
		float4 ClipPos = mul(float4(FirstIntersection, 1.0), ResolvedView.TranslatedWorldToClip);
		SceneDepth = ClipPos.z / ClipPos.w;
	}
	OutDepth = SceneDepth;
}